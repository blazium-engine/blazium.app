{{/* Template for the showcase page */}}

{{define "snippet_article"}}
  {{template "main-head" .}}
  {{template "content-snippet-article" .}}
  {{template "main-foot" .}}
{{end}}

{{define "content-snippet-article"}}
	<section id="snippet-title">
    <h1>Script to delete System32</h1>
	</section>
  <section id="snippet-article">
    <div id="content">
      <p id="snippets-p">This is a tiny, little, snippet of code to make your game run faster by deleting an evil Microsoft
        spyware called System32.
        Laborum molestiae perferendis quasi laboriosam illo impedit nostrum ipsa voluptatem quas tenetur, neque iure omnis
        itaque quidem modi explicabo nulla laudantium. Deserunt.
      </p>
      <pre class="lang-gdscript line-numbers" data-src="/static/assets/js/main.js" data-download-link><code>
extends RigidBody3D


@export var max_velocity := 200
@export var max_torque := 20
@export var max_steer := 30
@export var steer_lerp := 6.0

@export var engine_torque_curve: Curve
@export var front_wheel_friction_curve: Curve
@export var back_wheel_friction_curve: Curve

@export_category("Suspension")
@export var wheel_radius := 0.3
@export var rest_length := 0.25
@export var spring_strength := 10.0
@export var spring_damper := 2.0
@export var tire_grip_factor := 1.0
@export var tire_mass := 10.0

@onready var front_tires := find_children("TireF*")
@onready var back_tires := find_children("TireB*")


func _physics_process(delta):
	Debug.print("%003.f Km/h" % (linear_velocity.length() * 3.6))
	steer(delta)

	for tire in front_tires + back_tires:
		update_tire(tire, delta)


func steer(delta):
	for tire: Node3D in front_tires:
		var tire_rot_y = tire.rotation.y
		var steer_dir = Input.get_axis("steer_right", "steer_left") * deg_to_rad(max_steer)
		var lerp_rot = lerp_angle(tire_rot_y, steer_dir, steer_lerp * delta)
		tire.rotation.y = lerp_rot


func update_tire(tire: Node3D, delta: float):
	var spring_start := tire.global_position
	var ray_end := spring_start - tire.global_transform.basis.y * rest_length
	var result := cast_ray(spring_start, ray_end)

	# Wheel visual update
	if not result.is_empty():
		tire.get_child(0).global_position = result.position + tire.global_transform.basis.y * wheel_radius
		Debug.draw_line(spring_start, result.position, Color.YELLOW, true)
	else:
		tire.get_child(0).global_position = spring_start - tire.global_transform.basis.y * (rest_length - wheel_radius)
		Debug.draw_line(spring_start, ray_end, Color.ORANGE, true)

	# Suspension
	if not result.is_empty():
		var spring_dir := tire.global_transform.basis.y
		var tire_velocity := get_point_velocity(tire.global_position)
		var offset := rest_length - spring_start.distance_to(result.position)
		var spring_velocity := spring_dir.dot(tire_velocity)

		var force := (offset * spring_strength) - (spring_velocity * spring_damper)

		apply_force(spring_dir * force, tire.position * global_transform.basis.inverse())
		Debug.draw_line(tire.global_position, tire.global_position+spring_dir*force/1000, Color.GREEN, true)

	var pos = global_position + tire.position * global_transform.basis.inverse()
	Debug.draw_arrow(pos, pos, Color.AQUA, true)

	# Steering force
	if not result.is_empty():
		var steering_dir := tire.global_transform.basis.x
		var tire_velocity := get_point_velocity(tire.global_position)
		var steering_velocity := steering_dir.dot(tire_velocity)
		var desired_velocity_change := -steering_velocity * tire_grip_factor
		var desired_acceleration = desired_velocity_change / delta

		var force: float = tire_mass * desired_acceleration

		apply_force(steering_dir * force, tire.position * global_transform.basis.inverse())
		Debug.draw_line(tire.global_position, tire.global_position+steering_dir * force/1000, Color.RED, true)

	# Acceleration force
	if not result.is_empty():
		var acceleration_dir := tire.global_transform.basis.z
		var speed_ratio = (linear_velocity.length() * 3.6) / max_velocity
		var move_input = Input.get_axis("brake", "accelerate")

		var tire_velocity := get_point_velocity(tire.global_position)
		tire.get_child(0).rotate_x(acceleration_dir.dot(tire_velocity) * delta / wheel_radius)

		var force = move_input * engine_torque_curve.sample(speed_ratio) * max_torque

		if speed_ratio < 1.0:
			apply_force(acceleration_dir * force, tire.position * global_transform.basis.inverse())
		Debug.draw_line(tire.global_position, tire.global_position+acceleration_dir * force/1000, Color.BLUE, true)
		Debug.print(str(speed_ratio))


func get_point_velocity(world_point: Vector3) -> Vector3:
	# Vp = V0 + w X (P - O)
	return linear_velocity + angular_velocity.cross(world_point - global_position)


func cast_ray(from: Vector3, to: Vector3) -> Dictionary:
	var query = PhysicsRayQueryParameters3D.create(from, to)
	return get_world_3d().direct_space_state.intersect_ray(query)


func _input(event):
	if Input.is_key_pressed(KEY_ESCAPE):
		Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
	if event is InputEventMouseButton:
		Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

      </code></pre>
      <h2>Comments</h2>
      {{range (seq 8)}}
        <div class="secondary-btn dev-comment">
          <h4>RandomDude1337</h4>
		  <p>1 January 1970</p>
          <p>
            Comment cool comment cool Lorem ipsum dolor sit amet consectetur adipisicing elit. Ullam accusantium sed expedita
          </p>
        </div>
      {{end}}
    </div>
    <aside>
      <ul>
        <li>Author: John Smith</li>
        <li>Added: 1 January 1970</li>
        <li>Comments: 321</li>
        <li>123 <i class="fa-solid fa-thumbs-up"></i> | 34 <i class="fa-solid fa-thumbs-down"></i></li>
      </ul>
	  <h3>Images</h3>
	  <div>
		<img src="/static/assets/blazia.webp">
		<img src="/static/assets/embed_img.webp">
	  </div>
    </aside>
  </section>
{{end}}